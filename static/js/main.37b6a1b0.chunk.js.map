{"version":3,"sources":["assets/logo.jpg","assets/playerPlaceholderImg.jpg","firebase.js","Header.js","FinalScore.js","Card.js","Hiscore.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","src","mushroomLogo","alt","title","Component","FinalScore","props","finalScoreTally","onClick","resetQuiz","Card","handleClickUserName","e","setState","modalOpen","handleClickReset","console","log","window","location","reload","handleUserName","userName","target","value","handleClick","preventDefault","isToxic","images","state","mushroomIndex","toxic","toString","counterIndex","database","ref","push","set","score","correctAnswer","isQuizDone","wrongAnswer","bind","currentMushroom","this","playerLogo","htmlFor","type","id","minlength","maxlength","onChange","required","binomial","image","Hiscore","userNameAndScore","on","response","hiScoreNames","val","arr","Object","values","map","name","i","key","topTenScores","sort","a","b","slice","classname","Footer","class","href","App","mushroomSpecies","mushroomObj","Mushrooms","mush","img","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37b6a1b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2ed5d571.jpg\";","module.exports = __webpack_public_path__ + \"static/media/playerPlaceholderImg.ac822c5a.jpg\";","import firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDWhP1gnVx7KXilgNLu5zwNEiZuxccfZPQ\",\n    authDomain: \"fungi-funguy.firebaseapp.com\",\n    databaseURL: \"https://fungi-funguy.firebaseio.com\",\n    projectId: \"fungi-funguy\",\n    storageBucket: \"fungi-funguy.appspot.com\",\n    messagingSenderId: \"44305783892\",\n    appId: \"1:44305783892:web:580bdf51257d791dbaa1c1\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport mushroomLogo from './assets/logo.jpg';\n\nclass Header extends Component{\n    render(){\n      return (\n        <header className=\"wrapper\">\n          <div className=\"title\">\n            <h1>Is this fungi a Fun Guy?</h1>\n            <img src={mushroomLogo} className=\"mushyLogo\" alt=\"smiling mushroom fun guy logo from the nounproject.com by sobinsergey\" title=\"smiling mushroom fun guy logo from the nounproject.com by sobinsergey\"/>\n          </div>\n          <p className=\"headerP\">Mushrooms are fascinating, but they're not always friendly! Can you tell which are toxic and which are edible? </p>\n        </header>\n      );\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nconst FinalScore = (props) => {\n    return (\n        <div className=\"finalScoreBanner wrapper\">\n            <h3><span className=\"hiScoreTitleTwo\">Congrats </span><span className=\"hiScoreTitleThree\">Congrats</span> <span className=\"hiScoreTitleTwo\">Congrats </span></h3>\n            <h3>You're done!</h3>\n            <p>Your final score was:</p>\n            <p> {props.finalScoreTally} / 20!</p>\n            <p>And always remember mushrooms are our friends!</p>\n            <button onClick={props.resetQuiz}>Reset!</button>\n        </div>\n    )\n}\n\n\n\nexport default FinalScore;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport playerLogo from './assets/playerPlaceholderImg.jpg';\nimport FinalScore from '../src/FinalScore';\n\nclass Card extends Component {\n    constructor() {\n        super()\n        this.state = {\n            mushroomIndex: 0,\n            counterIndex: 1,\n            correctAnswer: 0,\n            wrongAnswer: 0,\n            isQuizDone: false,\n            userName: null,\n            modalOpen: true\n        }\n        this.handleClickReset = this.handleClickReset.bind(this);\n    }\n    handleClickUserName = (e) => {\n        this.setState({\n            modalOpen: false,\n        })\n    }\n    handleClickReset = function(e) {\n        console.log('reset the quiz?')\n        window.location.reload();\n    }\n    handleUserName = (e) => {\n        this.setState({\n            userName: e.target.value\n        })\n    }\n    handleClick = (e) => {\n        e.preventDefault()\n        const isToxic = this.props.images[this.state.mushroomIndex].toxic.toString()\n        this.setState({\n            mushroomIndex: this.state.mushroomIndex + 1,\n            counterIndex: this.state.counterIndex +1,\n\n        })\n        if (this.state.counterIndex === 20) {\n            const dbRef = firebase.database().ref('userName');\n            dbRef.push().set({userName: `${this.state.userName}`, score: `${this.state.correctAnswer}`}) \n            this.setState({\n                isQuizDone: true,\n            })\n        }\n        if(isToxic === e.target.value) {\n            this.setState({\n                correctAnswer: this.state.correctAnswer + 1,\n            })\n        } else {\n            this.setState({\n                wrongAnswer: this.state.wrongAnswer + 1,\n            })\n        }\n    }\n\n    render(){\n        const currentMushroom = this.props.images[this.state.mushroomIndex];\n        console.log(this.state.mushroomIndex)\n        if(this.state.modalOpen && !this.state.isQuizDone) {\n            return (\n                <section className=\"cardHolder wrapper\">\n                <div className=\"playerCard mushroomCard boxShadow wrapper\">\n                    <div className=\"playerPlaceholderImage\">\n                        <img src={playerLogo} alt=\"mushroom logo from the noun project.com created by AomAm\" title=\"mushroom logo from the noun project.com created by AomAm\"/>\n                    </div>\n                    <div className=\"playerStack\">\n                        <h3 className=\"hiScoreTitleTwo\">Player</h3>\n                        <h3 className=\"hiScoreTitleThree\">Player</h3> \n                        <h3>Player</h3>\n                    </div>\n                    <form className=\"userName\">\n                        <label htmlFor=\"playerName\">Name: </label>\n                        <input type=\"text\" id=\"name\" minlength=\"2\" maxlength=\"18\" onChange={this.handleUserName} required/>\n                        <button className=\"startButton\" onClick={this.handleClickUserName}>Start!</button>\n                    </form>\n                </div>\n            </section>    \n            )\n        }\n\n        if (this.state.isQuizDone) {\n            return <FinalScore userName={this.state.userName} finalScoreTally={this.state.correctAnswer} resetQuiz={this.handleClickReset}/>\n        } \n        return (\n            <section className=\"cardHolder wrapper\">\n                <div className=\"mushroomCard wrapper boxShadow\">\n                    <h2 className=\"mushroomNames\">{currentMushroom.binomial}</h2>\n                    <img src={currentMushroom.image} alt=\"\"/>\n                    <div className=\"cardButtons\">\n                        <button value='true' className=\"firstButton\" onClick={this.handleClick}>Toxic</button>\n                        <button value='false' onClick={this.handleClick}>Edible</button>\n                    </div>  \n                </div>\n            </section>  \n        ) \n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nclass Hiscore extends Component {\n    constructor() {\n        super ();\n        this.state = {\n            userNameAndScore: []\n        }\n      }\n  \n      componentDidMount () {\n        const dbRef = firebase.database().ref()\n        dbRef.on('value', (response) => {\n        const hiScoreNames = response.val()\n        const arr = Object.values(hiScoreNames.userName);\n        let userNameAndScore = []\n        arr.map((name, i) => {\n        return userNameAndScore.push({ userName: name.userName, key: i, score: name.score });\n        })\n        let sortedArray = userNameAndScore.sort(function(a, b) {\n          return b.score - a.score;\n        });\n        let topTenScores = sortedArray.slice(0,10);\n        this.setState({ userNameAndScore: topTenScores});\n        });\n      }\n\n      render(){ \n        return (\n          <section className=\"wrapper hiScore boxShadow\">\n            <div className=\"playerStack hiScoreTitle\">\n              <h3 className=\"hiScoreTitleTwo\">Hi-Scores</h3>\n              <h3 className=\"hiScoreTitleThree\">Hi-Scores</h3> \n              <h3>Hi-Scores</h3>\n            </div>\n            <div className=\"hiScoreNames\">\n              {this.state.userNameAndScore.map(name => {\n                return <p key={name.userName} classname=\"hiScoreNameSpan\"><span className=\"hiScoreTitleTwo hiScoreNameSpan\">Name:</span>{name.userName} <span className=\"hiScoreTitleThree hiScoreNameSpan\">Score:</span>{name.score}/20</p>; })}\n            </div>\n          </section>\n        );\n    }\n}\n\nexport default Hiscore;","import React, { Component } from 'react';\n\nclass Footer extends Component {\n    render(){\n      return (\n        <footer>\n            <div className=\"wrapper\">\n                <h3 className=\"hiScoreTitleTwo wrapper\">Disclaimer!</h3>\n                <p>This game is made out of respect and love for the mushroom, fungi, and the entire natural world. Don't eat random mushrooms you find in the woods. You'll get sick or die and that is 100% not chill.</p>\n                <p className=\"copyrightText\">Copyright &copy; 2020 // Coded by Michael le Riche</p>\n                <div class=\"socialIcons\">\n                    <ul>\n                        <li>\n                            <a className=\"linkedInLogo\" href=\"https://www.linkedin.com/in/michael-le-riche-147b361a0/\">\n                                <i class=\"fab fa-linkedin-in\"></i>\n                                <span class=\"visuallyHidden\">Linkedin</span>\n                            </a>\n                        </li>  \n                        <li>\n                            <a className=\"twitterLogo\" href=\"https://twitter.com/mlerichecodes\">\n                                <i class=\"fab fa-twitter\"></i>\n                                <span class=\"visuallyHidden\">Twitter</span>\n                            </a>\n                        </li>\n                        <li>\n                            <a className =\"gitHubLogo\" href=\"https://github.com/michaelleriche\">\n                                <i class=\"fab fa-github\"></i>\n                                <span class=\"visuallyHidden\">github</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"lastTextDiv\">\n                    <p className=\"hiScoreTitleTwo lastText\"> When in doubt, ask yourself:</p>\n                    <p className=\"hiScoreTitleThree lastText\"> ***** What would Neil Young Do? ***** </p>\n                </div>\n            </div>\n        </footer>\n      );\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Header from './Header';\nimport Card from './Card';\nimport Hiscore from './Hiscore';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super ();\n    this.state = {\n      mushroomSpecies: []\n    }\n  }\n\n  componentDidMount () {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const mushroomObj = response.val();\n      const arr = Object.values(mushroomObj.Mushrooms);\n      let mushroomSpecies = [...this.state.mushroomSpecies]\n      arr.map((mush, i) => {\n      return mushroomSpecies.push({ image: mush.img, key: i, toxic: mush.toxic, binomial: mush.binomial });\n      })\n      this.setState({ mushroomSpecies: mushroomSpecies})\n    });\n  }\n\n  render(){\n      return (\n        <div>\n          <Header />\n          <Card images={this.state.mushroomSpecies} />\n          <Hiscore />\n          <Footer />\n        </div>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}